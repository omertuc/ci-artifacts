apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: gpu-operator-ci
  name: operator-bundle-image-builder-script
  namespace: gpu-operator-ci
data:
  run_operator_bundle_image_builder.sh: |
    #! /bin/bash
    set -ex
    set -o nounset

    echo "QUAY_BUNDLE_IMAGE_NAME=${QUAY_BUNDLE_IMAGE_NAME}"
    echo "OPERATOR_IMAGE_NAME=${OPERATOR_IMAGE_NAME}"

    CONTAINER_FILE=./bundle.Dockerfile
    if [ ! -f ${CONTAINER_FILE} ]; then
      # TODO: This branch allows for bundles to be built for the modified GPU operator make file.
      # This was merged in https://github.com/NVIDIA/gpu-operator/commit/b0e99d9e6ac8738ee335f6e866242b1c9977ea09
      # This can be set as the default once no older versions are built.
      CONTAINER_FILE=./docker/bundle.Dockerfile
    fi
    CONTEXT_LOCATION="."

    CSV_FILE=bundle/manifests/gpu-operator.clusterserviceversion.yaml

    rm -rf /work
    mkdir /work && cd /work

    CLONE_DIR=gpu-operator
    rm -rf ${CLONE_DIR}
    git clone ${OPERATOR_GIT_REPO} ${CLONE_DIR} -b ${OPERATOR_GIT_REF} --depth 1

    cd ${CLONE_DIR}

    git show --quiet
    GIT_VERSION=$(git rev-parse --short HEAD)

    mv $CSV_FILE ${CSV_FILE}.orig
    yq --yaml-roundtrip \
      --arg OPERATOR_IMAGE_NAME "$OPERATOR_IMAGE_NAME" \
      --arg GIT_VERSION "$GIT_VERSION" \
      --arg CSV_SEMVER "$CSV_SEMVER" \
      ' .metadata.annotations.containerImage=$OPERATOR_IMAGE_NAME
      | .metadata.name="gpu-operator-certified-"+$CSV_SEMVER+"-git"+$GIT_VERSION
      | .spec.version=$CSV_SEMVER+"-git"+$GIT_VERSION
      | .spec.install.spec.deployments[0].spec.template.spec.containers[0].image=$OPERATOR_IMAGE_NAME' \
      ${CSV_FILE}.orig > $CSV_FILE
    rm ${CSV_FILE}.orig

    cat $CSV_FILE | grep containerImage

    cat /mnt/alm-examples-patch/alm-patch.yml

    # Generate a file combining /mnt/alm-patch.yml and the alm_examples in the CSV
    yq --slurpfile patch /mnt/alm-examples-patch/alm-patch.yml '
    # recursively combines two composite JSON entities by concatenating arrays at the same position
    # taken from https://stackoverflow.com/a/53666584/791430
    def meld(a; b):
      a as $a | b as $b
      | if ($a|type) == "object" and ($b|type) == "object"
        then reduce ([$a,$b]|add|keys_unsorted[]) as $k ({}; 
          .[$k] = meld( $a[$k]; $b[$k]) )
        elif ($a|type) == "array" and ($b|type) == "array"
        then $a+$b
        elif $b == null then $a
        else $b
        end;

    [meld(.metadata.annotations."alm-examples" | fromjson[0]; $patch[0])]' ${CSV_FILE} > patched_alm_examples.yml

    cat patched_alm_examples.yml
    cat $CSV_FILE

    # Assign the patched alm examples file back into the CSV annotation
    mv $CSV_FILE ${CSV_FILE}.orig
    yq --yaml-roundtrip --rawfile alm_examples patched_alm_examples.yml '.metadata.annotations."alm-examples" = $alm_examples' ${CSV_FILE}.orig > ${CSV_FILE}
    rm ${CSV_FILE}.orig

    cat $CSV_FILE

    # build

    podman build -f $CONTAINER_FILE $CONTEXT_LOCATION -t $QUAY_BUNDLE_IMAGE_NAME

    # push the image to quay.io

    cat /var/run/secrets/openshift.io/push/.dockerconfigjson > /tmp/.dockercfg
    AUTH="--tls-verify=false --authfile /tmp/.dockercfg"

    podman push $AUTH $QUAY_BUNDLE_IMAGE_NAME
